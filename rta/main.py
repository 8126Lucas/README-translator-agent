import os
import sys
from dotenv import load_dotenv
from google import genai
from google.genai import types
import typer
import emoji

app = typer.Typer()

@app.command()
def main(file_path: str, verbose: bool = False):
    load_dotenv()
    API_KEY = os.environ.get("GEMINI_API_KEY")
    if not API_KEY:
        print(emoji.emojize("‚ùå The Gemini API key was not retrieved successfully!", language='alias'))
        sys.exit(400)
    client = genai.Client(api_key=API_KEY)
    print(emoji.emojize("ü§ñ Gemini was successfully called", language='alias'))
    prompt = """Tu √©s um agente tradutor especializado em ficheiros Markdown, especificamente READMEs. O teu trabalho √© traduzir o conte√∫do de um ficheiro de portugu√™s para ingl√™s. Traduz o conte√∫do do ficheiro de forma precisa, mantendo o tom t√©cnico e a fluidez, como se o texto original tivesse sido escrito em ingl√™s. A sa√≠da deve ser estritamente em formato Markdown. Mant√©m a estrutura original, incluindo cabe√ßalhos (#, ##, etc.), listas, formata√ß√£o de c√≥digo (```), tabelas e links. N√£o traduza elementos como nomes de ficheiros, anota√ß√µes HTML, refer√™ncias a imagens, ou links (no par√¢metro href de <a>). Assegure-se de que estes elementos s√£o mantidos exatamente como est√£o no ficheiro original e que os links continuam a ser utiliz√°veis e corretos. Para o link de navega√ß√£o entre idiomas no topo do ficheiro, substitua o href que aponta para README.md por #, e o href que aponta para # por README.pt.md. O resultado deve conter apenas a tradu√ß√£o do conte√∫do. N√£o adicione qualquer texto extra, explica√ß√µes ou coment√°rios."""    
    if not file_path.endswith("README.pt.md"):
        print(emoji.emojize("‚ùå Sorry, but the file is not valid. File name must be \"README.pt.md\".", language='alias'))
        sys.exit(400)
    print(emoji.emojize("‚úÖ File README.pt.md found", language='alias'))
    with open(file_path, "r", encoding="utf-8") as file:
        file_contents = file.read()
        file.close()
    messages = [
        types.Content(role="user", parts=[types.Part(text=prompt), types.Part(text=file_contents)])
    ]
    response = client.models.generate_content(
        model='gemini-2.0-flash-001',
        contents=messages
    )
    file_translated = response.text
    print(emoji.emojize("‚úÖ README.pt.md has been translated", language='alias'))
    result_path = file_path.replace("README.pt.md", "README.md")
    with open(result_path, "w", encoding="utf-8") as file:
        file.write(file_translated)
        file.close()
    print(emoji.emojize("‚úÖ README.md now has the translated content", language='alias'))
    if verbose:
        print(emoji.emojize(f"‚ú® Prompt tokens: {response.usage_metadata.prompt_token_count}", language='alias'))
        print(emoji.emojize(f"‚ú® Response tokens: {response.usage_metadata.candidates_token_count}", language='alias'))

app()